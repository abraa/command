<?php
/**
 * ====================================
 * 接口公共类
 * ====================================
 * Author: 9004396
 * Date: 2017-04-01 13:17
 * ====================================
 * Project: new.m.chinaskin.cn
 * File: InterfaceController.class.php
 * ====================================
 */
namespace Common\Controller;
class InterfaceController extends InitController
{
    protected $busData;
    protected $status;
    protected $sysErr;
    protected $expires = 300;


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_checkSystemParams();
    }

    /**
     *
     */
    private function _checkSystemParams()
    {
        $this->sysLock(true);
        $param = I('param.');
        if (empty($param)) {
            $this->error('20001');
        } else {
            if(isset($param['busData'])){
                $this->busData = $param['busData'] = htmlspecialchars_decode($param['busData']);
            }
        }
        //校验URL是否超时
        $timestamp = $param['timestamp'];
        if (!$this->isTimeOut($timestamp)) {
            $this->error('20002');
        }

        //校验接口密钥
        $appKey = $param['app_key'];
        $appSecret = $param['app_secret'];
        if (empty($appKey) || empty($appSecret)) {
            $this->error('20003');
        }

        $secret = D('App')
            ->where(array('locked' => 0, 'app_key' => $appKey))
            ->getField('app_secret');
        if ($secret != $appSecret) {
            $this->error('20004');
        }

        //校验密钥
        $sign = I('param.sign', '', 'trim');
        if (empty($sign)) {
            $this->error('20005');
        }
        if (!$this->verify($param, $param['sign'])) {
            $this->error('20005');
        }
        $this->sysLock(false);
    }

    /**
     * 校验URL是否超时
     * @param int $times
     * @return bool
     */
    private function isTimeOut($times = 0)
    {
        if (empty($times)) {
            return false;
        }
        $strToTime = strtotime($times);
        $second = floor((time() - $strToTime) % 86400);
        if ($second > $this->expires) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 锁定系统错误
     * @param bool $status
     */
    private function sysLock($status = false)
    {
        if (is_null($this->sysErr)) {
            $this->sysErr = true;
        }
        $this->sysErr = $status ? true : false;
    }

    /**
     *
     * @param string $data
     * @return array
     */
    public function success($data = '')
    {
        $msg = L('SUCCESS');
        $status = 10000;

        if (!is_null($this->status) && isset($msg[$this->status])) {
            $status = $this->status;
        }

        $ret = array(
            'code' => $status,
            'msg' => $msg[$status],
        );

        if (!is_null($this->status) && isset($msg[$this->status])) {
            $ret['code'] = $this->status;
            $ret['msg'] = $msg[$this->status];
        }

        if (!empty($data)) {
            $ret['data'] = $data;
        }
        $this->ajaxReturn($ret);
    }

    /**
     * @param string $status
     * @param string $data
     * @param bool $isSystem
     */
    public function error($status = '', $data = '', $isSystem = false)
    {
        if ($this->sysErr) {
            $msg = L('SYSTEM');
        } else {
            $result = L(CONTROLLER_NAME);
            $msg = $result[ACTION_NAME];
        }
        $ret = array(
            'code' => $status,
            'msg' => $msg[$status],
        );

        if (!is_null($this->status) && isset($msg[$this->status])) {
            $ret['code'] = $this->status;
            $ret['msg'] = $msg[$this->status];
        }

        if (!empty($data)) {
            $ret['data'] = $data;
        }
        $this->ajaxReturn($ret);
    }


    /**
     * 除去数组中的空值和签名参数
     * @param array $para 签名参数组
     * @return array 去掉空值与签名参数后的新签名参数组
     */
    protected function paraFilter($para)
    {
        $para_filter = array();
        while (list ($key, $val) = each($para)) {
            if ($key == "sign" || $val == "") {
                continue;
            } else {
                $para_filter[$key] = $para[$key];
            }
        }
        return $para_filter;
    }

    /**
     * 校验
     * @param array $params
     * @param string $sign
     * @param string $key
     * @return bool
     */
    protected function verify($params, $sign)
    {
        $isSign = false;
        $key = $this->getKey($params['app_key'], $params['app_secret']);
        $para = $this->paraFilter($params);
        if (empty($para) || !is_array($para)) {
            return $isSign;
        }
        $paraStr = '';
        foreach ($para as $k => $v) {
            $paraStr .= "$k=$v&";
        }
        $paraStr = substr($paraStr, 0, -1);
        $verify = md5(md5($paraStr) . $key);
        if ($verify === $sign) {
            $isSign = true;
        }
        return $isSign;
    }

    /**
     * 生成加密的key
     * @param $appKey
     * @param $secret
     * @return string
     */
    private function getKey($appKey, $secret)
    {
        return md5(md5($appKey) . md5($secret));
    }


}