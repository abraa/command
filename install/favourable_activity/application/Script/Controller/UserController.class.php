<?php
/**
 * ====================================
 * 会员中心
 * ====================================
 * Author: 9004396
 * Date: 2017-05-13 17:52
 * ====================================
 * Project: new.m.chinaskin.cn
 * File: UserController.class.php
 * ====================================
 */
namespace Script\Controller;

use Common\Controller\ScriptController;
use Common\Extend\CsvReader;
use Home\Model\UserCustomerModel;
use Home\Model\UserRankModel;
use Home\Model\UsersModel;
use Think\Model;


class UserController extends ScriptController
{
    private $userModel;     //会员模型
    private $customerModel; //客户模型
    private $rankModel;     //会员等级模型

    public function _initialize()
    {

        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->userModel = new UsersModel();
        $this->customerModel = new UserCustomerModel();
        $this->rankModel = new UserRankModel();
    }

//    public function test(){
//        $file = TEMP_PATH . "noExist.txt";
//        if (!file_exists($file)) {
//            echo "========文件不存在==========\n";
//        }
//
//        $handle = fopen($file, 'r');
//        $mobile = array();
//        while (!feof($handle)) {
//            $string = fgets($handle);
//            $strArr = explode('=',$string);
//            if(isset($strArr[16]) && trim($strArr[16]) === '0'){
//                echo $string;
//            }else{
//                if(isset($strArr[5])){
//                    $mobile[] = $strArr[5];
//                }
//            }
//        }
//       file_put_contents(TEMP_PATH . "m5.csv", implode("\n",$mobile), FILE_APPEND);
//    }

//    public function test1()
//    {
//        $orderDataPath = TEMP_PATH . "NexMobile.csv";
//        if (!file_exists($orderDataPath)) {
//            echo "========文件不存在==========\n";
//        }
//        $limit = $this->offset * ($this->page - 1);
//        $csvReader = new CsvReader($orderDataPath);
//        $csvData = $csvReader->getData($this->offset, $limit);
//        $item = array();
//        foreach ($csvData as $data) {
//            list($mobile) = $data;
//            $item[] = $mobile;
//        }
//        ;
//        file_put_contents(TEMP_PATH . "NexMobileSql.txt", $this->userModel->getLastSql(), FILE_APPEND);
//    }


//    public function test2(){
//        $this->page = I('param.page', 1);
//        $this->maxPage = $this->page;
//        $cPhone = S('phone1');
//
//        if(empty($cPhone)){
//            $orderDataPath = TEMP_PATH . "4.csv";
//            if (!file_exists($orderDataPath)) {
//                echo "========文件不存在==========\n";
//            }
//            $csvReader = new CsvReader($orderDataPath);
//            $csvData = $csvReader->getData();
//            $phone = array();
//            foreach ($csvData as $data){
//                //初始化积分数据
//                list($id, $custom_id, $mobile, $custom_no) = $data;
//
//                $phone[] = $mobile;
//            }
//            S('phone1',$phone);
//            $cPhone = $phone;
//        }
//
//
//
//        $orderDataPath = TEMP_PATH . "NexMobile.csv";
//        if (!file_exists($orderDataPath)) {
//            echo "========文件不存在==========\n";
//        }
//        $limit = $this->offset * ($this->page - 1);
//        $csvReader = new CsvReader($orderDataPath);
//        $csvData = $csvReader->getData($this->offset, $limit);
//        $total = count($csvData);
//        $this->total += $total;
//
//        if (!empty($csvData)) {
//            foreach ($csvData as $data) {
//                $this->num++;
//                //初始化积分数据
//                list($mobile) = $data;
//
//                if(in_array($mobile,$cPhone)){
//                    $e = implode(",",$data);
//                    file_put_contents(RUNTIME_PATH . 'Temp/same.csv', $e . "\n", FILE_APPEND);
//                }else{
//                    $e = implode(",",$data);
//                    file_put_contents(RUNTIME_PATH . 'Temp/diff.csv', $e . "\n", FILE_APPEND);
//                }
//                echo $this->num . "======" . $mobile . "\n";
//            }
//        }
//    }


    public function test(){
        $this->page = I('param.page', 1);
        $this->maxPage = $this->page;
        $cPhone = S('phone');
        if(empty($cPhone)){
            $orderDataPath = TEMP_PATH . "m5.csv";
            if (!file_exists($orderDataPath)) {
                echo "========文件不存在==========\n";
            }
            $csvReader = new CsvReader($orderDataPath);
            $csvData = $csvReader->getData();
            $phone = array();
            foreach ($csvData as $data){
                list($mobile) = $data;
                $phone[] = $mobile;
            }
            S('phone',$phone);
            $cPhone = $phone;
        }
        $orderDataPath = TEMP_PATH . "point3.csv";
        if (!file_exists($orderDataPath)) {
            echo "========文件不存在==========\n";
        }
        $limit = $this->offset * ($this->page - 1);
        $csvReader = new CsvReader($orderDataPath);
        $csvData = $csvReader->getData($this->offset, $limit);
        $total = count($csvData);
        $this->total += $total;

        if (!empty($csvData)) {
            foreach ($csvData as $data) {
                $this->num++;
                //初始化积分数据
                list($mobile, $tel, $custom_id, $level, $pay_points, $total_points) = $data;

                //手机号码不存在获取座机号码
                $mobile = !empty($mobile) ? $mobile : (!empty($tel) ? $tel : '');

                if(in_array($mobile,$cPhone)){
                    $e = implode(",",$data);
                    file_put_contents(RUNTIME_PATH . 'Temp/lackOf4.csv', $e . "\n", FILE_APPEND);
                }
                echo $this->num . "======" . $mobile . "\n";
            }
        }
    }


    public function addPoint()
    {
        $this->page = I('param.page', 1);
        $this->maxPage = $this->page;
        $orderDataPath = TEMP_PATH . "lackOf3.csv";
        if (!file_exists($orderDataPath)) {
            echo "========文件不存在==========\n";
        }
        $csvReader = new CsvReader($orderDataPath);
        $csvData = $csvReader->getData();
        $total = count($csvData);
        $this->total += $total;


        if (!empty($csvData)) {
            foreach ($csvData as $data) {
                $this->num++;
                //初始化积分数据
                list($mobile, $tel, $custom_id, $level, $pay_points, $total_points) = $data;

                //手机号码不存在获取座机号码
                $mobile = !empty($mobile) ? $mobile : (!empty($tel) ? $tel : '');

                if (mb_strlen($mobile, 'utf8') != '32') {
                    $err = "数据错误：手机号码异常==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                    continue;
                }

                //获取客户编号
                $custom_no = $this->customerModel
                    ->where(array('phone' => $mobile, 'custom_no' => $custom_id))
                    ->getField('custom_id');
                if (empty($custom_no)) {
                    $err = "客户编号错误：客户编号不存在==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id . "======" . $custom_no;
                    array_push($this->errMsg, $err);
                    continue;
                }
                //获取会员信息
                $userInfo = $this->userModel
                    ->where(array('mobile' => $mobile))
                    ->field('user_id,custom_id,custom_no')
                    ->find();
                if (empty($userInfo)) { //会员不存在，新增会员
                    $userData = array(
                        'mobile' => $mobile,
                        'custom_id' => $custom_id,
                        'custom_no' => $custom_no,
                        'password' => md5(md5('cj123456')), //自动注册初始密码：cj123456
                        'user_num' => '',
                        'paypwd' => '',
                        'paytype' => '',
                        'state' => 1,
                        'push_state' => 0,
                        'auto_reg_time' => time(),
                    );
                    $user_id = $userRet = $this->userModel->add($userData);
                    if ($userRet == false) {
                        $err = "添加会员错误：添加会员失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                        array_push($this->errMsg, $err);
                        continue;
                    }
                } else {
                    $user_id = $userInfo['user_id'];
                    if (empty($userInfo['custom_id']) || empty($userInfo['custom_no'])) {
                        $userData = array(
                            'custom_id' => $custom_id,
                            'custom_no' => $custom_no,
                            'user_num' => '',
                            'paypwd' => '',
                            'paytype' => '',
                        );
                        $userRet = $this->userModel->where(array('user_id' => $user_id))->save($userData);
                        if ($userRet === false) {
                            $err = "会员绑定客户资料错误：会员绑定客户资料失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                            array_push($this->errMsg, $err);
                            $err = $this->userModel->getLastSql();
                            array_push($this->errMsg, $err);
                            continue;
                        }
                    }
                }

                //等级转化
                $rank = $this->rankModel
                    ->where(array('rank_name' => $level))
                    ->getField('rank_id');
                if (empty($rank)) {
                    $rank = $this->rankModel
                        ->order('min_points asc')
                        ->getField('rank_id');
                }


                //初始化积分
                $points_left = ($total_points - $pay_points); //可用积分
                if ($points_left < 0) {
                    $points_left = $total_points;
                    $pay_points = 0;
                }


                $model = new Model('', '', 'USER_CENTER');
                $model->startTrans();  //开始事务
                $flag = false;


                //检测是否存在积分记录
                $integral = $model->table('integral')
                    ->where(array('customer_id' => $custom_id))
                    ->field('total_points,points_left,id')
                    ->find();
                if (!empty($integral)) {
                    $integralData = array(
                        'total_points' => $integral['total_points'] + $points_left,
                        'points_left' => $integral['points_left'] + $points_left,
                        'rank' => $rank
                    );
                    $integralRet = $model->table('integral')->where(array('customer_id' => $custom_id))->save($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                } else {
                    $integralData = array(
                        'site_id' => 0,
                        'customer_id' => $custom_id,
                        'total_points' => $total_points,
                        'pay_points' => $pay_points,
                        'expire_points' => 0,
                        'points_left' => $points_left,
                        'rank' => $rank
                    );
                    $integral['id'] = $integralRet = $model->table('integral')->add($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                }


                if ($flag) {
                    $integralLog = array(
                        'user_id' => $user_id,
                        'customer_id' => $custom_id,
                        'site_id' => 0,
                        'order_sn' => '',
                        'order_id' => 0,
                        'state' => 0,
                        'points' => $points_left,
                        'remark' => '初始化订单积分',
                        'add_time' => ($this->page > 5) ? time() + 86400 : time(),
                        'integral_id' => $integral['id'],
                        'deal_with' => 0,
                        'point_type' => 0,
                        'extend_type' => 0,
                    );
                    $logRet = $model->table('integral_log')->add($integralLog);
                    if ($logRet) {
                        $model->commit();
                        $flag = true;
                    }
                }

                if ($flag == false) {
                    $model->rollback();
                    $err = "初始化积分错误：添加积分失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                }
                echo $this->num . "======" . $user_id . "\n";
            }
        }


        if (!empty($this->errMsg)) {
            foreach ($this->errMsg as $k => $e) {
                file_put_contents(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt', $e . "\n", FILE_APPEND);
                unset($this->errMsg[$k]);
            }
        }

        if (!empty($csvData) && (empty($this->maxPage) || $this->page < $this->maxPage)) {
            unset($csvData);
            echo "======page" . $this->page . "====每页总数" . $total . "====\n";
            $this->page++;
            $this->initialData();
        } else {
            echo "===执行数量" . $this->num . "===总数" . $this->total . "==\n";
            echo "====== end =====\n";
            if (file_exists(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt')) {
                echo "=====错误文件生成,路径" . RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt' . "\n";
            }
        }
    }


    public function handleUserCustom()
    {
        $this->page = I('param.page', 1);
        $this->maxPage = $this->page;
        $orderDataPath = TEMP_PATH . "gzbms_db.custom.2017.08.03.csv";
        if (!file_exists($orderDataPath)) {
            echo "========文件不存在==========\n";
        }
        $limit = $this->offset * ($this->page - 1);
        $csvReader = new CsvReader($orderDataPath);
        $csvData = $csvReader->getData($this->offset, $limit);
        $total = count($csvData);
        $this->total += $total;

        if (!empty($csvData)) {
            foreach ($csvData as $data) {
                $this->num++;
                //初始化积分数据
                list($custom_id, $custom_no, $mobile) = $data;

                if (mb_strlen($mobile, 'utf8') != '32') {
                    $err = "数据错误：手机号码异常==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id . "";
                    array_push($this->errMsg, $err);
                    continue;
                }

                //获取客户编号
                $userCustom = $this->customerModel
                    ->where(array('phone' => $mobile))
                    ->find();
                if (empty($userCustom)) {
                    $data['custom_no'] = $custom_id;
                    $data['custom_id'] = $custom_no;
                    $data['phone'] = $mobile;
                    $ret = $this->customerModel->add($data);
                    if (empty($ret)) {
                        $err = "新增客户资料错误：新增客户资料失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                        array_push($this->errMsg, $err);
                    }
                } else {
                    $data['custom_no'] = $custom_id;
                    $data['custom_id'] = $custom_no;
                    $ret = $this->customerModel->where(array('phone' => $mobile))->save($data);
                    if ($ret === false) {
                        $err = "更新客户资料错误：更新客户资料失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id . "===" . $this->customerModel->getLastSql();
                        array_push($this->errMsg, $err);
                    }
                }
                echo $this->num . "======" . $custom_no . "\n";
            }
        }


        if (!empty($this->errMsg)) {
            foreach ($this->errMsg as $k => $e) {
                file_put_contents(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt', $e . "\n", FILE_APPEND);
                unset($this->errMsg[$k]);
            }
        }

        if (!empty($csvData) && (empty($this->maxPage) || $this->page < $this->maxPage)) {
            unset($csvData);
            echo "======page" . $this->page . "====每页总数" . $total . "====\n";
            $this->page++;
            $this->handleUserCustom();
        } else {
            echo "===执行数量" . $this->num . "===总数" . $this->total . "==\n";
            echo "====== end =====\n";
            if (file_exists(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt')) {
                echo "=====错误文件生成,路径" . RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt' . "\n";
            }
        }

    }

    public function bindCustomerTotal()
    {
        $this->bindCustomerData(true);
    }

    public function bindCustomer()
    {
        $this->page = I('param.page', 1);
        $this->maxPage = $this->page;
        $this->bindCustomerData();
    }

    private function bindCustomerData($isTotal = false)
    {
        if ($isTotal) {
            $total = $this->userModel->count();
            $totalPage = ceil($total / $this->offset);
            echo $totalPage;
            exit;
        }
        $userData = $this->userModel
            ->field('user_id,mobile')
            ->limit($this->offset)
            ->page($this->page)
            ->order('user_id asc')
            ->select();
        $total = count($userData);
        $this->total += $total;
        if (!empty($userData)) {
            foreach ($userData as $k => $v) {
                $customer = $this->customerModel->where(array('phone' => $v['mobile']))->find();
                if (empty($customer)) {
                    $this->noChange++;
                    $this->num++;
                    echo $this->num . "======" . $v['user_id'] . "\n";
                    continue;
                }
                $data = array(
                    'custom_id' => $customer['custom_no'],
                    'custom_no' => $customer['custom_id']
                );
                $data = array_merge($data, $v);
                $ret = $this->userModel->save($data);
                if ($ret === false) {
                    array_push($this->errMsg, $v['mobile']);
                } else {
                    $this->num++;
                    echo $this->num . "======" . $v['user_id'] . "\n";
                }
            }
        }
        if (!empty($this->errMsg)) {
            foreach ($this->errMsg as $k => $e) {
                file_put_contents(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt', $e . "\n", FILE_APPEND);
                unset($this->errMsg[$k]);
            }
        }
        if (!empty($userData) && (empty($this->maxPage) || $this->num < $this->maxPage)) {
            unset($userData);
            echo "======page" . $this->page . "====每页总数" . $total . "====\n";
            $this->page++;
            $this->bindCustomer();
        } else {
            echo "====== end =====\n";
            if (file_exists(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt')) {
                echo "=====错误文件生成,路径" . RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt' . "\n";
            }
        }
    }


    public function bashInitial()
    {
        $page = I('param.page');
        $this->page = $page;
        $this->maxPage = $page;
        $this->initialData();
    }


    /**
     * 初始化订单积分
     */
    public function initialData2()
    {
        $page = I('param.page');
        $this->page = $page;
        $this->maxPage = $page;
        $orderDataPath = TEMP_PATH . "lackOf4.csv";
        if (!file_exists($orderDataPath)) {
            echo "========文件不存在==========\n";
        }
        $limit = $this->offset * ($this->page - 1);
        $csvReader = new CsvReader($orderDataPath);
        $csvData = $csvReader->getData($this->offset, $limit);
        $total = count($csvData);
        $this->total += $total;

        if (!empty($csvData)) {
            foreach ($csvData as $data) {
                $this->num++;
                //初始化积分数据
                list($mobile, $tel, $custom_id, $level, $pay_points, $total_points) = $data;

                //手机号码不存在获取座机号码
                $mobile = !empty($mobile) ? $mobile : (!empty($tel) ? $tel : '');

                if (mb_strlen($mobile, 'utf8') != '32') {
                    $err = "数据错误：手机号码异常==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                    continue;
                }

                //获取客户编号
                $custom_no = $this->customerModel
                    ->where(array('phone' => $mobile, 'custom_no' => $custom_id))
                    ->getField('custom_id');
                if (empty($custom_no)) {
                    $err = "客户编号错误：客户编号不存在==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id . "======" . $custom_no;
                    array_push($this->errMsg, $err);
                    continue;
                }
                //获取会员信息
                $userInfo = $this->userModel
                    ->where(array('mobile' => $mobile))
                    ->field('user_id,custom_id,custom_no')
                    ->find();
                if (empty($userInfo)) { //会员不存在，新增会员
                    $userData = array(
                        'mobile' => $mobile,
                        'custom_id' => $custom_id,
                        'custom_no' => $custom_no,
                        'password' => md5(md5('cj123456')), //自动注册初始密码：cj123456
                        'user_num' => '',
                        'paypwd' => '',
                        'paytype' => '',
                        'state' => 1,
                        'push_state' => 0,
                        'auto_reg_time' => time(),
                    );
                    $user_id = $userRet = $this->userModel->add($userData);
                    if ($userRet == false) {
                        $err = "添加会员错误：添加会员失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                        array_push($this->errMsg, $err);
                        continue;
                    }
                } else {
                    $user_id = $userInfo['user_id'];
                    if (empty($userInfo['custom_id']) || empty($userInfo['custom_no'])) {
                        $userData = array(
                            'custom_id' => $custom_id,
                            'custom_no' => $custom_no,
                            'user_num' => '',
                            'paypwd' => '',
                            'paytype' => '',
                        );
                        $userRet = $this->userModel->where(array('user_id' => $user_id))->save($userData);
                        if ($userRet === false) {
                            $err = "会员绑定客户资料错误：会员绑定客户资料失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                            array_push($this->errMsg, $err);
                            $err = $this->userModel->getLastSql();
                            array_push($this->errMsg, $err);
                            continue;
                        }
                    }
                }

                //等级转化
                $rank = $this->rankModel
                    ->where(array('rank_name' => $level))
                    ->getField('rank_id');
                if (empty($rank)) {
                    $rank = $this->rankModel
                        ->order('min_points asc')
                        ->getField('rank_id');
                }


                //初始化积分
                $points_left = ($total_points - $pay_points); //可用积分
                if ($points_left < 0) {
                    $points_left = $total_points;
                    $pay_points = 0;
                }


                $model = new Model('', '', 'USER_CENTER');

                $Log = $model->table('integral_log')->where(array('customer_id' => $custom_id))->find();
                if (!empty($Log)) {
                    $err = "积分日志错误：积分已经添加==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                    continue;
                }

                $model->startTrans();  //开始事务
                $flag = false;


                //检测是否存在积分记录
                $integral = $model->table('integral')
                    ->where(array('customer_id' => $custom_id))
                    ->field('total_points,points_left,id')
                    ->find();
                if (!empty($integral)) {
                    $integralData = array(
                        'total_points' => $integral['total_points'] + $points_left,
                        'points_left' => $integral['points_left'] + $points_left,
                        'rank' => $rank
                    );
                    $integralRet = $model->table('integral')->where(array('customer_id' => $custom_id))->save($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                } else {
                    $integralData = array(
                        'site_id' => 0,
                        'customer_id' => $custom_id,
                        'total_points' => $total_points,
                        'pay_points' => $pay_points,
                        'expire_points' => 0,
                        'points_left' => $points_left,
                        'rank' => $rank
                    );
                    $integral['id'] = $integralRet = $model->table('integral')->add($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                }


                if ($flag) {
                    $integralLog = array(
                        'user_id' => $user_id,
                        'customer_id' => $custom_id,
                        'site_id' => 0,
                        'order_sn' => '',
                        'order_id' => 0,
                        'state' => 0,
                        'points' => $points_left,
                        'remark' => '初始化订单积分',
                        'add_time' => ($this->page > 5) ? time() + 86400 : time(),
                        'integral_id' => $integral['id'],
                        'deal_with' => 0,
                        'point_type' => 0,
                        'extend_type' => 0,
                    );
                    $logRet = $model->table('integral_log')->add($integralLog);
                    if ($logRet) {
                        $model->commit();
                        $flag = true;
                    }
                }

                if ($flag == false) {
                    $model->rollback();
                    $err = "初始化积分错误：添加积分失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                }
                echo $this->num . "======" . $user_id . "\n";
            }
        }


        if (!empty($this->errMsg)) {
            foreach ($this->errMsg as $k => $e) {
                file_put_contents(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt', $e . "\n", FILE_APPEND);
                unset($this->errMsg[$k]);
            }
        }

        if (!empty($csvData) && (empty($this->maxPage) || $this->page < $this->maxPage)) {
            unset($csvData);
            echo "======page" . $this->page . "====每页总数" . $total . "====\n";
            $this->page++;
            $this->initialData();
        } else {
            echo "===执行数量" . $this->num . "===总数" . $this->total . "==\n";
            echo "====== end =====\n";
            if (file_exists(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt')) {
                echo "=====错误文件生成,路径" . RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt' . "\n";
            }
        }
    }


    /**
     * 初始化订单积分
     */
    private function initialData()
    {
        $orderDataPath = TEMP_PATH . "point2.csv";
        if (!file_exists($orderDataPath)) {
            echo "========文件不存在==========\n";
        }
        $limit = $this->offset * ($this->page - 1);
        $csvReader = new CsvReader($orderDataPath);
        $csvData = $csvReader->getData($this->offset, $limit);
        $total = count($csvData);
        $this->total += $total;

        if (!empty($csvData)) {
            foreach ($csvData as $data) {
                $this->num++;
                //初始化积分数据
                list($mobile, $tel, $custom_id, $level, $pay_points, $total_points) = $data;

                //手机号码不存在获取座机号码
                $mobile = !empty($mobile) ? $mobile : (!empty($tel) ? $tel : '');

                if (mb_strlen($mobile, 'utf8') != '32') {
                    $err = "数据错误：手机号码异常==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                    continue;
                }

                //获取客户编号
                $custom_no = $this->customerModel
                    ->where(array('phone' => $mobile, 'custom_no' => $custom_id))
                    ->getField('custom_id');
                if (empty($custom_no)) {
                    $err = "客户编号错误：客户编号不存在==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                    continue;
                }
                //获取会员信息
                $userInfo = $this->userModel
                    ->where(array('mobile' => $mobile))
                    ->field('user_id,custom_id,custom_no')
                    ->find();
                if (empty($userInfo)) { //会员不存在，新增会员
                    $userData = array(
                        'mobile' => $mobile,
                        'custom_id' => $custom_id,
                        'custom_no' => $custom_no,
                        'password' => md5(md5('cj123456')), //自动注册初始密码：cj123456
                        'user_num' => '',
                        'paypwd' => '',
                        'paytype' => '',
                        'state' => 1,
                        'push_state' => 0,
                        'auto_reg_time' => time(),
                    );
                    $user_id = $userRet = $this->userModel->add($userData);
                    if ($userRet == false) {
                        $err = "添加会员错误：添加会员失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                        array_push($this->errMsg, $err);
                        continue;
                    }
                } else {
                    $user_id = $userInfo['user_id'];
                    if (empty($userInfo['custom_id']) || empty($userInfo['custom_no'])) {
                        $userData = array(
                            'custom_id' => $custom_id,
                            'custom_no' => $custom_no,
                            'user_num' => '',
                            'paypwd' => '',
                            'paytype' => '',
                        );
                        $userRet = $this->userModel->save($userData);
                        if ($userRet === false) {
                            $err = "会员绑定客户资料错误：会员绑定客户资料失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                            array_push($this->errMsg, $err);
                            continue;
                        }
                    }
                }

                //等级转化
                $rank = $this->rankModel
                    ->where(array('rank_name' => $level))
                    ->getField('rank_id');
                if (empty($rank)) {
                    $rank = $this->rankModel
                        ->order('min_points asc')
                        ->getField('rank_id');
                }


                //初始化积分
                $points_left = ($total_points - $pay_points); //可用积分
                if ($points_left < 0) {
                    $points_left = $total_points;
                    $pay_points = 0;
                }
                $model = new Model('', '', 'USER_CENTER');
                $model->startTrans();  //开始事务
                $flag = false;


                //检测是否存在积分记录
                $integral = $model->table('integral')
                    ->where(array('customer_id' => $custom_id))
                    ->field('total_points,points_left,id')
                    ->find();
                if (!empty($integral)) {
                    $integralData = array(
                        'total_points' => $integral['total_points'] + $points_left,
                        'points_left' => $integral['points_left'] + $points_left,
                        'rank' => $rank
                    );
                    $integralRet = $model->table('integral')->where(array('customer_id' => $custom_id))->save($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                } else {
                    $integralData = array(
                        'site_id' => 0,
                        'customer_id' => $custom_id,
                        'total_points' => $total_points,
                        'pay_points' => $pay_points,
                        'expire_points' => 0,
                        'points_left' => $points_left,
                        'rank' => $rank
                    );
                    $integral['id'] = $integralRet = $model->table('integral')->add($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                }


                if ($flag) {
                    $integralLog = array(
                        'user_id' => $user_id,
                        'customer_id' => $custom_id,
                        'site_id' => 0,
                        'order_sn' => '',
                        'order_id' => 0,
                        'state' => 0,
                        'points' => $points_left,
                        'remark' => '初始化订单积分',
                        'add_time' => ($this->page > 5) ? time() + 86400 : time(),
                        'integral_id' => $integral['id'],
                        'deal_with' => 0,
                        'point_type' => 0,
                        'extend_type' => 0,
                    );
                    $logRet = $model->table('integral_log')->add($integralLog);
                    if ($logRet) {
                        $model->commit();
                        $flag = true;
                    }
                }

                if ($flag == false) {
                    $model->rollback();
                    $err = "初始化积分错误：添加积分失败==" . __FUNCTION__ . "===" . $mobile . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                }
                echo $this->num . "======" . $user_id . "\n";
            }
        }


        if (!empty($this->errMsg)) {
            foreach ($this->errMsg as $k => $e) {
                file_put_contents(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt', $e . "\n", FILE_APPEND);
                unset($this->errMsg[$k]);
            }
        }

        if (!empty($csvData) && (empty($this->maxPage) || $this->page < $this->maxPage)) {
            unset($csvData);
            echo "======page" . $this->page . "====每页总数" . $total . "====\n";
            $this->page++;
            $this->initialData();
        } else {
            echo "===执行数量" . $this->num . "===总数" . $this->total . "==\n";
            echo "====== end =====\n";
            if (file_exists(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt')) {
                echo "=====错误文件生成,路径" . RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt' . "\n";
            }
        }
    }


    public function initialCheckInTotal()
    {
        $this->initialCheckInData(true);
    }

    public function initialCheckIn()
    {
        $page = I('param.page');
        $this->page = $page;
        $this->maxPage = $page;
        $this->initialCheckInData();
    }


    /**
     * @param bool $isTotal
     */
    private function initialCheckInData($isTotal = false)
    {
        $config = C('db_config.1');
        $model = new Model('', '', array_merge($config['CONFIG'], array('DB_TYPE' => C('DB_TYPE'))));
        $where = array(
            'mobile' => array('neq', '')
        );
        if ($isTotal) {
            $total = $model->table($config['CONFIG']['DB_PREFIX'] . 'bind_user')
                ->where($where)
                ->count();
            $totalPage = ceil($total / $this->offset);
            echo $totalPage;
            exit;
        }
        $bindUserData = $model->table($config['CONFIG']['DB_PREFIX'] . 'bind_user')
            ->where($where)
            ->field('points_left,mobile')
            ->limit($this->offset)
            ->page($this->page)
            ->select();
        $total = count($bindUserData);
        $this->total += $total;
        if ($bindUserData) {
            foreach ($bindUserData as $bindUser) {
                $this->num++;
                //检测是否有签到积分
                if (empty($bindUser['points_left'])) {
                    $err = "签到积分错误：没有签到积分==" . __FUNCTION__ . "===" . $bindUser['mobile'];
                    array_push($this->errMsg, $err);
                    continue;
                }


                //获取会员信息
                $userInfo = $this->userModel
                    ->where(array('mobile' => $bindUser['mobile']))
                    ->field('custom_id,user_id')
                    ->find();
                if (empty($userInfo)) {
                    $err = "会员错误：会员不存在==" . __FUNCTION__ . "===" . $bindUser['mobile'];
                    array_push($this->errMsg, $err);
                    continue;
                }
                if (!isset($userInfo['custom_id'])) { //会员是否绑定会员编号
                    $customInfo = $this->customerModel
                        ->where(array('phone' => $bindUser['mobile']))
                        ->field('custom_no,custom_id')
                        ->find();
                    if (empty($customInfo)) {
                        $err = "客户资料错误：客户资料不存在==" . __FUNCTION__ . "===" . $bindUser['mobile'];
                        array_push($this->errMsg, $err);
                        continue;
                    }

                    $userData = array(
                        'custom_id' => $customInfo['custom_no'],
                        'custom_no' => $customInfo['custom_id'],
                        'user_num' => '',
                        'paypwd' => '',
                        'paytype' => '',
                    );
                    $userRet = $this->userModel->where(array('mobile' => $bindUser['mobile']))->save($userData);  //更新会员编号
                    if ($userRet === false) {
                        $err = "会员绑定客户资料错误：会员绑定客户资料失败==" . __FUNCTION__ . "===" . $bindUser['mobile'];
                        array_push($this->errMsg, $err);
                        continue;
                    }
                    $userInfo['custom_id'] = $customInfo['custom_no'];
                }
                $custom_id = $userInfo['custom_id'];
                $user_id = $userInfo['user_id'];

                $model = new Model('', '', 'USER_CENTER');


                $Log = $model->table('integral_log')->where(array('customer_id' => $custom_id, 'point_type' => 1))->find();
                if (!empty($Log)) {
                    $err = "积分日志错误：积分已经添加==" . __FUNCTION__ . "===" . $bindUser['mobile'];
                    array_push($this->errMsg, $err);
                    continue;
                }

                $model->startTrans();  //开始事务
                $flag = false;

                //检测是否存在积分记录
                $integral = $model->table('integral')
                    ->where(array('customer_id' => $custom_id))
                    ->field('total_points,points_left,id')
                    ->find();
                if (!empty($integral)) {
                    $integralData = array(
                        'total_points' => $integral['total_points'] + $bindUser['points_left'],
                        'points_left' => $integral['points_left'] + $bindUser['points_left']
                    );
                    $integralRet = $model->table('integral')->where(array('customer_id' => $custom_id))->save($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                } else {
                    $integralData = array(
                        'site_id' => 0,
                        'customer_id' => $custom_id,
                        'total_points' => $bindUser['points_left'],
                        'pay_points' => 0,
                        'expire_points' => 0,
                        'points_left' => $bindUser['points_left'],
                    );
                    $integral['id'] = $integralRet = $model->table('integral')->add($integralData);
                    if (!empty($integralRet)) {
                        $flag = true;
                    }
                }

                if ($flag) {
                    $integralLog = array(
                        'user_id' => $user_id,
                        'customer_id' => $custom_id,
                        'site_id' => 0,
                        'order_sn' => '',
                        'order_id' => 0,
                        'state' => 0,
                        'points' => $bindUser['points_left'],
                        'remark' => '初始化签到积分',
                        'add_time' => time(),
                        'integral_id' => $integral['id'],
                        'deal_with' => 0,
                        'point_type' => 1,
                        'extend_type' => 0,
                    );
                    $logRet = $model->table('integral_log')->add($integralLog);
                    if ($logRet) {
                        $model->commit();
                        $flag = true;
                    }
                }

                if ($flag == false) {
                    $model->rollback();
                    $err = "初始化积分错误：添加积分失败==" . __FUNCTION__ . "===" . $bindUser['mobile'] . "=====" . $custom_id;
                    array_push($this->errMsg, $err);
                }
            }

            if (!empty($this->errMsg)) {
                foreach ($this->errMsg as $k => $e) {
                    file_put_contents(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt', $e . "\n", FILE_APPEND);
                    unset($this->errMsg[$k]);
                }
            }


            if (!empty($bindUserData) && (empty($this->maxPage) || $this->page < $this->maxPage)) {
                unset($bindUserData);
                echo "======page" . $this->page . "====每页总数" . $total . "====\n";
                $this->page++;
                $this->initialCheckIn();
            } else {
                echo "===执行数量" . $this->num . "===总数" . $this->total . "==\n";
                echo "====== end =====\n";
                if (file_exists(RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt')) {
                    echo "=====错误文件生成,路径" . RUNTIME_PATH . 'Temp/' . __FUNCTION__ . '.txt' . "\n";
                }
            }
        }
    }

}